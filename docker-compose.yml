version: "3.9"

services:
  mailhog:
    container_name: ${PROJECT_NAME}-mailhog
    image: mailhog/mailhog:latest
    ports:
      - ${MAILHOG_BIND_PORT}:8025
    restart: always
    networks:
      - _network

  memcached:
    container_name: ${PROJECT_NAME}-memcached
    image: memcached:${MEMCACHED_VERSION}
    restart: always
    networks:
      - _network

  database:
    command:
      [
        '--default_authentication_plugin=mysql_native_password',
        '--character-set-server=${DATABASE_ENCODING}',
        '--collation-server=${DATABASE_COLLATION}'
      ]
    container_name: ${PROJECT_NAME}-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    image: ${DATABASE_TYPE}:${DATABASE_VERSION}
    ports:
      - ${MYSQL_BIND_PORT}:3306
    volumes:
      - mysqldata:/var/lib/mysql:delegated
      - ./www:/srv/www:delegated
    restart: always
    networks:
      - _network

  # phpmyadmin:
  #   image: phpmyadmin:${PMA_VERSION}
  #   container_name: ${PROJECT_NAME}-phpmyadmin
  #   depends_on:
  #     - database
  #   environment:
  #     - PMA_HOST=database
  #     - PMA_PORT=${PMA_PORT}
  #     - PMA_USER=${PMA_USER}
  #     - PMA_PASSWORD=${PMA_PASSWORD}
  #     - PMA_ARBITRARY=${PMA_ARBITRARY}
  #   ports:
  #     - ${PMA_BIND_PORT}:80
  #   restart: always
  #   networks:
  #     - _network

  php:
    build:
      args:
        - PHP_VERSION=${PHP_VERSION}
        - COMPOSER_VERSION=${COMPOSER_VERSION}
        - MHSENDMAIL_VERSION=${MHSENDMAIL_VERSION}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
      context: ./docker/php
      target: php
    container_name: ${PROJECT_NAME}-php
    depends_on:
      - mailhog
      - database
    environment:
      - COMPOSER_HOME=/.config/composer
    user: ${USER_ID}:${GROUP_ID}
    volumes:
      - ./www:/srv/www:delegated
    working_dir: /srv/www
    restart: always
    networks:
      - _network

  nginx:
    build:
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - SITE_NAME=${SITE_NAME}
        - SITE_IS_SECURE=${SITE_IS_SECURE}
        - SITE_TYPE=${SITE_TYPE}
      context: ./docker/nginx
    container_name: ${PROJECT_NAME}-nginx
    depends_on:
      - php
    ports:
      - ${NGINX_PORT_UNSECURE}:80
      - ${NGINX_PORT_SECURE}:443
    volumes:
      - ./www:/srv/www:delegated
    working_dir: /srv/www
    restart: always
    networks:
      - _network

  nodejs:
    build:
      args:
        - NODEJS_VERSION=${NODEJS_VERSION}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
      context: ./docker/nodejs
    container_name: ${PROJECT_NAME}-nodejs
    environment:
      - NPM_CONFIG_CACHE=/.config/npm
    image: node:${NODEJS_VERSION}
    user: ${USER_ID}:${GROUP_ID}
    volumes:
      - ./www:/srv/www:delegated
    working_dir: /srv/www
    networks:
      - _network

  redis:
    command: [ 'redis-server', '--appendonly', 'yes' ]
    container_name: ${PROJECT_NAME}-redis
    image: redis:${REDIS_VERSION}
    volumes:
      - redisdata:/data
    restart: always
    networks:
      - _network

  scheduler:
    container_name: ${PROJECT_NAME}-scheduler
    depends_on:
      - php
    image: mcuadros/ofelia:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/scheduler/config.ini:/etc/ofelia/config.ini
    networks:
      - _network
  worker:
    build:
      args:
        - PHP_VERSION=${PHP_VERSION}
        - COMPOSER_VERSION=${COMPOSER_VERSION}
        - MHSENDMAIL_VERSION=${MHSENDMAIL_VERSION}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
      context: ./docker/php
      target: worker
    container_name: ${PROJECT_NAME}-worker
    depends_on:
      - php
    volumes:
      - ./www:/srv/www:delegated
    working_dir: /srv/www
    networks:
      - _network

volumes:
  mysqldata:
  redisdata:


networks:
  _network:
    name: ${PROJECT_NAME}
    driver: bridge
